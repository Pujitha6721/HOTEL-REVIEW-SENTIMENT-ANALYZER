# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K2S7xM_SWAovobND6zFngNwRXuF4TxIT
"""

# -- coding: utf-8 --
"""Hotel Review Sentiment and Service Analysis"""

import pandas as pd
import torch
from transformers import pipeline
import nltk
from google.colab import files
import re # Import the re module

# Install necessary libraries
!pip install transformers
!pip install pandas
!pip install nltk

# Download NLTK punkt tokenizer
nltk.download('punkt')

# Upload CSV file containing hotel reviews
print("Please upload your hotel reviews CSV file:")
uploaded = files.upload()

try:
    # Load the uploaded CSV file into a DataFrame
    # Check file extension and use appropriate reader
    file_name = next(iter(uploaded))
    if file_name.endswith('.csv'):
        df = pd.read_csv(file_name)
    elif file_name.endswith('.xlsx'):
        df = pd.read_excel(file_name)
    else:
        raise ValueError("Unsupported file format. Please upload a CSV or Excel file.")

    print("\nFirst few rows of uploaded data:")
    print(df.head())
except Exception as e:
    print(f"Error loading file: {str(e)}")
    raise

# Initialize the sentiment analysis model
print("\nLoading sentiment analysis model...")
try:
    sentiment_model = pipeline("sentiment-analysis")
except Exception as e:
    print(f"Error loading model: {str(e)}")
    raise

# Define hotel-specific service categories and keywords
HOTEL_SERVICES = {
    "Room Quality": ["room", "bed", "cleanliness", "linen", "housekeeping", "maid"],
    "Food Service": ["food", "breakfast", "dinner", "restaurant", "buffet", "meal"],
    "Facilities": ["pool", "gym", "spa", "wifi", "amenities", "facilities"],
    "Staff Service": ["staff", "reception", "service", "friendly", "rude", "manager"],
    "Location": ["location", "view", "access", "transport", "distance", "near"],
    "Value": ["price", "expensive", "worth", "value", "overpriced"]
}

def analyze_sentiment(text):
    """Perform sentiment analysis on hotel review text"""
    try:
        # Truncate long reviews to stay within model limits
        processed_text = str(text)[:512]
        result = sentiment_model(processed_text)[0]
        return {
            'sentiment': result['label'],
            'confidence': result['score'],
            'positive_words': [],
            'negative_words': []
        }
    except Exception as e:
        print(f"Error analyzing sentiment: {str(e)}")
        return {
            'sentiment': "ERROR",
            'confidence': 0,
            'positive_words': [],
            'negative_words': []
        }

def analyze_service_mentions(text):
    """Analyze which hotel services are mentioned in the review"""
    text_lower = str(text).lower()
    services_mentioned = []

    # Track specific words used for each service
    mentioned_details = {service: [] for service in HOTEL_SERVICES}

    for service, keywords in HOTEL_SERVICES.items():
        for keyword in keywords:
            if re.search(rf'\b{keyword}\b', text_lower):
                mentioned_details[service].append(keyword)
                if service not in services_mentioned:
                    services_mentioned.append(service)

    return {
        'services_mentioned': ", ".join(services_mentioned) if services_mentioned else "None",
        'mentioned_details': mentioned_details
    }

print("\nAnalyzing reviews...")

# Apply analysis functions to each review using progress_apply for large datasets
df['Sentiment_Results'] = df['Review'].apply(analyze_sentiment)
df['Service_Analysis'] = df['Review'].apply(analyze_service_mentions)


# Expand the results into separate columns
df = pd.concat([
    df.drop(['Sentiment_Results', 'Service_Analysis'], axis=1),
    df['Sentiment_Results'].apply(pd.Series),
    df['Service_Analysis'].apply(pd.Series)
], axis=1)

# Calculate overall statistics
stats = {
    'total_reviews': len(df),
    'positive_reviews': len(df[df['sentiment'] == 'POSITIVE']),
    'negative_reviews': len(df[df['sentiment'] == 'NEGATIVE']),
    'neutral_reviews': len(df[df['sentiment'] == 'NEUTRAL'])
}

# Add service mention frequency stats
for service in HOTEL_SERVICES:
    stats[f"{service}_mentions"] = df['services_mentioned'].str.contains(service).sum()

print("\nAnalysis completed. Summary statistics:")
print(stats)

# Generate detailed report DataFrame
detailed_report = df[[
    'Review', 'sentiment', 'confidence', 'services_mentioned'
]]

# Save results
output_filename = "Hotel_Review_Analysis_Report.xlsx"
print(f"\nSaving results to {output_filename}...")

with pd.ExcelWriter(output_filename) as writer:
    # Save detailed data
    detailed_report.to_excel(writer, sheet_name='Detailed Analysis', index=False)

    # Save summary statistics
    pd.DataFrame.from_dict(stats, orient='index', columns=['Count']).to_excel(
        writer, sheet_name='Summary Statistics'
    )

    # Save service mention breakdown
    service_counts = {service: stats[f"{service}_mentions"] for service in HOTEL_SERVICES}
    pd.DataFrame.from_dict(service_counts, orient='index', columns=['Mentions']).to_excel(
        writer, sheet_name='Service Mentions'
    )

# Download the analyzed file
files.download(output_filename)

print("\nAnalysis complete! File downloaded successfully.")